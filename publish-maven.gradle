/*
 * Copyright 2016-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'

publishing {
	repositories {
		maven {
			url = project.properties.getOrDefault('publicationRepository', "${System.getenv('HOME')}/.m2/repository")
		}
	}
	publications {
		mavenJava(MavenPublication) {
			suppressAllPomMetadataWarnings()
			from components.java
			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				url = "https://spring.io/projects/spring-credhub"
				organization {
					name = "VMware, Inc."
					url = "https://spring.io"
				}
				licenses {
					license {
						name = "The Apache Software License, Version 2.0"
						url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
						distribution = "repo"
					}
				}
				scm {
					url = "https://github.com/spring-projects/spring-credhub"
					connection = "scm:git:https://github.com/spring-projects/spring-credhub.git"
					developerConnection = "scm:git:https://github.com/spring-projects/spring-credhub.git"
				}
				issueManagement {
					system = "GitHub"
					url = "https://github.com/spring-projects/spring-credhub/issues"
				}
				developers {
					developer {
						id = "sfrederick"
						name = "Scott Frederick"
						email = "sfrederick@pivotal.io"
					}
				}
				withXml {
					def pomNode = asNode()
					def dependencyManagementNode = pomNode.get('dependencyManagement')
					if (dependencyManagementNode) pomNode.remove(dependencyManagementNode)
				}
			}

			// Published pom will use fully-qualified dependency versions and no BOMs
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
		}
	}
}
